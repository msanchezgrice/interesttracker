datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String   @id
  email        String   @unique
  displayName  String?
  createdAt    DateTime @default(now())
  devices         Device[]
  events          Event[]
  ideas           Idea[]
  drafts          Draft[]
  topics          TopicPreference[]
  trends          ManualTrend[]
  excludedDomains ExcludedDomain[]
  preferences     UserPreferences?
}

model Device {
  id        String   @id @default(cuid())
  userId    String
  label     String?
  apiKey    String   @unique
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id         String   @id @default(cuid())
  userId     String
  url        String
  urlHash    String
  title      String?
  domain     String
  ms         Int
  scroll     Float?
  tsStart    DateTime
  tsEnd      DateTime
  source     String
  createdAt  DateTime @default(now())
  
  // Enhanced tracking fields
  metadataFetched  Boolean  @default(false)
  metadata         Json?    // { description, keywords, ogImage, author, publishedDate }
  themes           String[]
  contentTags      String[]
  interestScore    Int?     // 0-100
  potentialIdeas   Json?    // Array of { title, hook, format }
  
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([urlHash])
  @@index([domain])
  @@index([interestScore])
  @@index([themes])
}

model Page {
  urlHash    String   @id
  url        String   @unique
  domain     String
  title      String?
  lang       String?
  lastSeenAt DateTime @default(now())
  @@index([domain])
}

model TopicPreference {
  id        String   @id @default(cuid())
  userId    String
  label     String
  weight    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ManualTrend {
  id        String   @id @default(cuid())
  userId    String
  topic     String
  weight    Float
  note      String?
  decayAfterDays Int  @default(7)
  createdAt DateTime @default(now())
  expiresAt DateTime?
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Idea {
  id            String   @id @default(cuid())
  userId        String
  topic         String
  sourceUrls    String[]
  score         Float
  scoreBreakdown Json
  status        IdeaStatus @default(PENDING)
  createdAt     DateTime @default(now())
  
  // New fields for better idea generation
  format         Platform?
  estimatedReach Json?     // { score: 0-100, reasoning: string }
  tags           String[]
  proposedOutput Json?     // { platform, content, metadata }
  sourceEventIds String[]
  
  User          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Drafts        Draft[]
}

enum IdeaStatus {
  PENDING
  ACCEPTED
  REJECTED
  POSTED
}

model Draft {
  id        String   @id @default(cuid())
  userId    String
  ideaId    String
  platform  Platform
  text      String
  metadata  Json
  createdAt DateTime @default(now())
  Idea      Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Platform {
  TWITTER
  LINKEDIN
  BLOG
  SHORTS
}

model ExcludedDomain {
  id        String   @id @default(cuid())
  userId    String
  domain    String
  createdAt DateTime @default(now())
  
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, domain])
}

model UserPreferences {
  id               String   @id @default(cuid())
  userId           String   @unique
  weeklyThemes     String[] // Themes the user is focused on this week
  generalInterests String[] // Ongoing general interests
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())
  
  User             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


